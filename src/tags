!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddLight	scene.cpp	/^void Scene::AddLight(Light *l)$/;"	f	class:Scene
AddSphere	scene.cpp	/^void Scene::AddSphere(Sphere *s)$/;"	f	class:Scene
Ambient	main.cpp	/^FloatVec Ambient()$/;"	f
ApplyLightingModel	main.cpp	/^FloatVec ApplyLightingModel(Ray *ray)$/;"	f
CAMERA_H	camera.h	6;"	d
Camera	camera.cpp	/^Camera::Camera( float px, float py, float pz,$/;"	f	class:Camera
Camera	camera.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	camera.h	/^class Camera {$/;"	c
ClampVec	main.cpp	/^FloatVec ClampVec(FloatVec i)$/;"	f
Component	pixel.h	/^typedef unsigned char Component;$/;"	t
ComponentClamp	pixel.h	/^inline Component ComponentClamp(int i)$/;"	f
ComponentLerp	pixel.cpp	/^Component ComponentLerp(Component c, Component d, double t)$/;"	f
ComponentRandom	pixel.cpp	/^Component ComponentRandom(void)$/;"	f
ComponentScale	pixel.cpp	/^Component ComponentScale(Component c, double f)$/;"	f
DIRECTIONAL	light.h	/^enum Type {SPOT, DIRECTIONAL, POINT};$/;"	e	enum:Type
DiffuseContribution	main.cpp	/^FloatVec DiffuseContribution(Light *light, Hit *hit)$/;"	f
Distance	main.cpp	/^float Distance(FloatVec a, FloatVec b)$/;"	f
FAST_BITS	stb_image.h	1618;"	d
FLOATVEC_H	floatvector.h	2;"	d
FindIntersection	ray.cpp	/^bool Ray::FindIntersection(Scene *scene)$/;"	f	class:Ray
FloatClamp	main.cpp	/^int FloatClamp (float i)$/;"	f
FloatVec	floatvector.cpp	/^FloatVec::FloatVec(): x{1},y{1},z{1} {}$/;"	f	class:FloatVec
FloatVec	floatvector.cpp	/^FloatVec::FloatVec(float x, float y, float z): x{x}, y{y}, z{z} {}$/;"	f	class:FloatVec
FloatVec	floatvector.h	/^class FloatVec {$/;"	c
GetPixel	image.h	/^    Pixel& GetPixel (int x, int y) const { assert(ValidCoord(x,y));  return data.pixels[y*width + x]; }$/;"	f	class:Image
HIT_H	hit.h	2;"	d
Height	image.h	/^    int Height    () const { return height; }$/;"	f	class:Image
Hit	hit.cpp	/^Hit::Hit() {}$/;"	f	class:Hit
Hit	hit.cpp	/^Hit::Hit(Sphere *s, FloatVec p, FloatVec n): $/;"	f	class:Hit
Hit	hit.h	/^class Hit{$/;"	c
IMAGE_INCLUDED	image.h	9;"	d
INCLUDE_STB_IMAGE_WRITE_H	stb_image_write.h	125;"	d
Image	image.cpp	/^Image::Image (char* fname){$/;"	f	class:Image
Image	image.cpp	/^Image::Image (const Image& src){$/;"	f	class:Image
Image	image.cpp	/^Image::Image (int width_, int height_){$/;"	f	class:Image
Image	image.h	/^class Image$/;"	c
Initialize	scene.cpp	/^void Scene::Initialize()$/;"	f	class:Scene
LIGHT_H	light.h	2;"	d
Light	light.cpp	/^Light::Light(float r, float g, float b,$/;"	f	class:Light
Light	light.h	/^class Light$/;"	c
Luminance	pixel.cpp	/^Component Pixel::Luminance ()$/;"	f	class:Pixel
MATERIAL_H	material.h	2;"	d
Material	material.cpp	/^Material::Material():$/;"	f	class:Material
Material	material.cpp	/^Material::Material(float ar, float ag, float ab,$/;"	f	class:Material
Material	material.h	/^class Material {$/;"	c
NumPixels	image.h	/^    int NumPixels () const { return num_pixels; }$/;"	f	class:Image
Output	main.cpp	/^void Output(Image *img, string fn)$/;"	f
PIXEL_INCLUDED	pixel.h	9;"	d
POINT	light.h	/^enum Type {SPOT, DIRECTIONAL, POINT};$/;"	e	enum:Type
ParseFile	main.cpp	/^void ParseFile(string fn)$/;"	f
Pixel	pixel.h	/^    Pixel (Component r_=0, Component g_=0, Component b_=0, Component a_=255) : r(r_), g(g_), b(b_), a(a_) {}$/;"	f	struct:Pixel
Pixel	pixel.h	/^    Pixel (FloatVec vec) : r(vec.x), g(vec.y), b(vec.z), a(255) {}$/;"	f	struct:Pixel
Pixel	pixel.h	/^    Pixel (uint8_t *data) : r(data[0]), g(data[1]), b(data[2]), a(data[3]) {}$/;"	f	struct:Pixel
Pixel	pixel.h	/^struct Pixel$/;"	s
PixelData	image.h	/^    union PixelData{  $/;"	u	class:Image
PixelLerp	pixel.cpp	/^Pixel PixelLerp (const Pixel& p, const Pixel& q, double t)$/;"	f
PixelQuant	pixel.cpp	/^Pixel PixelQuant( const Pixel &p, int nbits)$/;"	f
PixelRandom	pixel.cpp	/^Pixel PixelRandom(void)$/;"	f
PrintPixel	pixel.cpp	/^void PrintPixel(const Pixel &p)$/;"	f
RAY_H	ray.h	2;"	d
Ray	ray.cpp	/^Ray::Ray(FloatVec p, FloatVec d)$/;"	f	class:Ray
Ray	ray.cpp	/^Ray::Ray(Scene *scene, int i, int j)$/;"	f	class:Ray
Ray	ray.h	/^class Ray{$/;"	c
RayTrace	main.cpp	/^Image *RayTrace() $/;"	f
Reflect	main.cpp	/^Ray Reflect(Ray ray, FloatVec normal)$/;"	f
SCENE_H	scene.h	2;"	d
SPHERE_H	sphere.h	2;"	d
SPOT	light.h	/^enum Type {SPOT, DIRECTIONAL, POINT};$/;"	e	enum:Type
STBIDEF	stb_image.h	307;"	d
STBIDEF	stb_image.h	309;"	d
STBIWDEF	stb_image_write.h	132;"	d
STBIWDEF	stb_image_write.h	134;"	d
STBIW_ASSERT	stb_image_write.h	206;"	d
STBIW_FREE	stb_image_write.h	191;"	d
STBIW_MALLOC	stb_image_write.h	189;"	d
STBIW_MEMMOVE	stb_image_write.h	200;"	d
STBIW_REALLOC	stb_image_write.h	190;"	d
STBIW_REALLOC_SIZED	stb_image_write.h	195;"	d
STBIW_UCHAR	stb_image_write.h	209;"	d
STBI_ASSERT	stb_image.h	495;"	d
STBI_FREE	stb_image.h	553;"	d
STBI_HAS_LROTL	stb_image.h	533;"	d
STBI_INCLUDE_STB_IMAGE_H	stb_image.h	82;"	d
STBI_MALLOC	stb_image.h	551;"	d
STBI_NEON	stb_image.h	642;"	d
STBI_NOTUSED	stb_image.h	527;"	d
STBI_NOTUSED	stb_image.h	529;"	d
STBI_NO_BMP	stb_image.h	452;"	d
STBI_NO_GIF	stb_image.h	461;"	d
STBI_NO_HDR	stb_image.h	464;"	d
STBI_NO_JPEG	stb_image.h	446;"	d
STBI_NO_PIC	stb_image.h	467;"	d
STBI_NO_PNG	stb_image.h	449;"	d
STBI_NO_PNM	stb_image.h	470;"	d
STBI_NO_PSD	stb_image.h	455;"	d
STBI_NO_SIMD	stb_image.h	575;"	d
STBI_NO_SIMD	stb_image.h	590;"	d
STBI_NO_TGA	stb_image.h	458;"	d
STBI_NO_ZLIB	stb_image.h	475;"	d
STBI_ORDER_BGR	stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon4
STBI_ORDER_RGB	stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon4
STBI_REALLOC	stb_image.h	552;"	d
STBI_REALLOC_SIZED	stb_image.h	557;"	d
STBI_SIMD_ALIGN	stb_image.h	620;"	d
STBI_SIMD_ALIGN	stb_image.h	628;"	d
STBI_SIMD_ALIGN	stb_image.h	648;"	d
STBI_SIMD_ALIGN	stb_image.h	652;"	d
STBI_SSE2	stb_image.h	594;"	d
STBI_VERSION	stb_image.h	287;"	d
STBI__BYTECAST	stb_image.h	1431;"	d
STBI__CASE	stb_image.h	1469;"	d
STBI__CASE	stb_image.h	1487;"	d
STBI__CASE	stb_image.h	1518;"	d
STBI__CASE	stb_image.h	1536;"	d
STBI__CASE	stb_image.h	4338;"	d
STBI__CASE	stb_image.h	4351;"	d
STBI__CASE	stb_image.h	4355;"	d
STBI__CASE	stb_image.h	4368;"	d
STBI__COMBO	stb_image.h	1468;"	d
STBI__COMBO	stb_image.h	1517;"	d
STBI__F_avg	stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon15
STBI__F_avg_first	stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon15
STBI__F_none	stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon15
STBI__F_paeth	stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon15
STBI__F_paeth_first	stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon15
STBI__F_sub	stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon15
STBI__F_up	stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon15
STBI__HDR_BUFLEN	stb_image.h	6404;"	d
STBI__IDCT_1D	stb_image.h	2097;"	d
STBI__MARKER_none	stb_image.h	2582;"	d
STBI__PNG_TYPE	stb_image.h	4656;"	d
STBI__RESTART	stb_image.h	2599;"	d
STBI__SCAN_header	stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon6
STBI__SCAN_load	stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon6
STBI__SCAN_type	stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon6
STBI__X64_TARGET	stb_image.h	562;"	d
STBI__X86_TARGET	stb_image.h	564;"	d
STBI__ZFAST_BITS	stb_image.h	3719;"	d
STBI__ZFAST_MASK	stb_image.h	3720;"	d
STBI_default	stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon1
STBI_grey	stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon1
STBI_grey_alpha	stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon1
STBI_rgb	stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon1
STBI_rgb_alpha	stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon1
STB_IMAGE_IMPLEMENTATION	main.cpp	22;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	main.cpp	25;"	d	file:
Scene	scene.cpp	/^Scene::Scene():$/;"	f	class:Scene
Scene	scene.h	/^class Scene {$/;"	c
Set	pixel.h	/^    void Set (Component  r_, Component  g_, Component  b_)                { r=r_; g=g_; b=b_; }$/;"	f	struct:Pixel
Set	pixel.h	/^    void Set (Component  r_, Component  g_, Component  b_, Component  a_) { r=r_; g=g_; b=b_; a=a_; }$/;"	f	struct:Pixel
SetAmbient	scene.cpp	/^void Scene::SetAmbient(FloatVec *a)$/;"	f	class:Scene
SetBackground	scene.cpp	/^void Scene::SetBackground(FloatVec *b)$/;"	f	class:Scene
SetCamera	scene.cpp	/^void Scene::SetCamera(Camera *c)$/;"	f	class:Scene
SetClamp	pixel.cpp	/^void Pixel::SetClamp (double r_, double g_, double b_)$/;"	f	class:Pixel
SetClamp	pixel.cpp	/^void Pixel::SetClamp (double r_, double g_, double b_, double a_)$/;"	f	class:Pixel
SetMaxDepth	scene.cpp	/^void Scene::SetMaxDepth(int n)$/;"	f	class:Scene
SetPixel	image.h	/^    void SetPixel (int x, int y, Pixel p) const { assert(ValidCoord(x,y));  data.pixels[y*width + x] = p; }$/;"	f	class:Image
SetResolution	scene.cpp	/^void Scene::SetResolution(int w, int h)$/;"	f	class:Scene
ShowUsage	main.cpp	/^static void ShowUsage(void)$/;"	f	file:
SpecularContribution	main.cpp	/^FloatVec SpecularContribution(Light *light, Ray *ray, Hit *hit)$/;"	f
Sphere	sphere.cpp	/^Sphere::Sphere(Material mat, float x,float y,float z, float radius):$/;"	f	class:Sphere
Sphere	sphere.cpp	/^Sphere::Sphere(float x,float y,float z, float radius):$/;"	f	class:Sphere
Sphere	sphere.h	/^class Sphere {$/;"	c
Type	light.h	/^enum Type {SPOT, DIRECTIONAL, POINT};$/;"	g
ValidCoord	image.h	/^    int ValidCoord (int x, int y)  const { return x>=0 && x<width && y>=0 && y<height; }$/;"	f	class:Image
Width	image.h	/^    int Width     () const { return width; }$/;"	f	class:Image
Write	image.cpp	/^void Image::Write(const char* fname){$/;"	f	class:Image
YCbCr_to_RGB_kernel	stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon8
_CRT_NONSTDC_NO_DEPRECATE	stb_image_write.h	167;"	d
_CRT_SECURE_NO_WARNINGS	stb_image_write.h	164;"	d
a	pixel.h	/^    Component r, g, b, a;$/;"	m	struct:Pixel
a1	light.h	/^        float a1,a2;$/;"	m	class:Light
a2	light.h	/^        float a1,a2;$/;"	m	class:Light
all_a	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
ambient	material.h	/^        FloatVec ambient;$/;"	m	class:Material
ambient	scene.h	/^        FloatVec *ambient;$/;"	m	class:Scene
app14_color_transform	stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon8
b	pixel.h	/^    Component r, g, b, a;$/;"	m	struct:Pixel
background	scene.h	/^        FloatVec *background;$/;"	m	class:Scene
bgindex	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
bits_per_channel	stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon5
bl	scene.h	/^        FloatVec *tl, *tr, *br, *bl;$/;"	m	class:Scene
bpp	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
br	scene.h	/^        FloatVec *tl, *tr, *br, *bl;$/;"	m	class:Scene
buffer_start	stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon3
buflen	stb_image.h	/^   int buflen;$/;"	m	struct:__anon3
camera	scene.h	/^        Camera *camera;$/;"	m	class:Scene
center	sphere.h	/^        FloatVec center;$/;"	m	class:Sphere
channel	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
channel_order	stb_image.h	/^   int channel_order;$/;"	m	struct:__anon5
code	stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon7
code_bits	stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon8
code_buffer	stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon8
code_buffer	stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon12
codes	stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon19
coeff	stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon8::__anon9
coeff_h	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon8::__anon9
coeff_w	stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon8::__anon9
color	light.h	/^        FloatVec color;$/;"	m	class:Light
color_table	stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon19
context	stb_image_write.h	/^   void *context;$/;"	m	struct:__anon20
cross	floatvector.cpp	/^FloatVec FloatVec::cross(FloatVec other)$/;"	f	class:FloatVec
cur_x	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon19
cur_y	stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon19
data	image.h	/^    PixelData data;$/;"	m	class:Image
data	stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon8::__anon9
dc_pred	stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon8::__anon9
dct_bfly32o	stb_image.h	2232;"	d
dct_bfly32o	stb_image.h	2366;"	d
dct_bfly32o	stb_image.h	2418;"	d
dct_bfly32o	stb_image.h	2576;"	d
dct_const	stb_image.h	2204;"	d
dct_const	stb_image.h	2361;"	d
dct_interleave16	stb_image.h	2249;"	d
dct_interleave16	stb_image.h	2368;"	d
dct_interleave8	stb_image.h	2243;"	d
dct_interleave8	stb_image.h	2367;"	d
dct_long_mac	stb_image.h	2399;"	d
dct_long_mac	stb_image.h	2572;"	d
dct_long_mul	stb_image.h	2395;"	d
dct_long_mul	stb_image.h	2571;"	d
dct_pass	stb_image.h	2254;"	d
dct_pass	stb_image.h	2369;"	d
dct_pass	stb_image.h	2426;"	d
dct_pass	stb_image.h	2577;"	d
dct_rot	stb_image.h	2208;"	d
dct_rot	stb_image.h	2362;"	d
dct_trn16	stb_image.h	2486;"	d
dct_trn16	stb_image.h	2508;"	d
dct_trn32	stb_image.h	2487;"	d
dct_trn32	stb_image.h	2509;"	d
dct_trn64	stb_image.h	2488;"	d
dct_trn64	stb_image.h	2510;"	d
dct_trn8_16	stb_image.h	2532;"	d
dct_trn8_16	stb_image.h	2567;"	d
dct_trn8_32	stb_image.h	2533;"	d
dct_trn8_32	stb_image.h	2568;"	d
dct_trn8_8	stb_image.h	2531;"	d
dct_trn8_8	stb_image.h	2566;"	d
dct_wadd	stb_image.h	2222;"	d
dct_wadd	stb_image.h	2364;"	d
dct_wadd	stb_image.h	2408;"	d
dct_wadd	stb_image.h	2574;"	d
dct_widen	stb_image.h	2217;"	d
dct_widen	stb_image.h	2363;"	d
dct_widen	stb_image.h	2403;"	d
dct_widen	stb_image.h	2573;"	d
dct_wsub	stb_image.h	2227;"	d
dct_wsub	stb_image.h	2365;"	d
dct_wsub	stb_image.h	2413;"	d
dct_wsub	stb_image.h	2575;"	d
delay	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
delta	stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon7
depth	stb_image.h	/^   int depth;$/;"	m	struct:__anon14
dequant	stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon8
diffuse	material.h	/^        FloatVec diffuse;$/;"	m	class:Material
dir	camera.h	/^        FloatVec dir;    \/\/Viewing direction$/;"	m	class:Camera
dir	light.h	/^        FloatVec dir;$/;"	m	class:Light
dir	ray.h	/^        FloatVec dir; \/\/direction$/;"	m	class:Ray
dot	floatvector.cpp	/^float FloatVec::dot(FloatVec other)$/;"	f	class:FloatVec
eflags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
eob_run	stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon8
eof	stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon2
expanded	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
fast	stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon11
fast	stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon7
fast_ac	stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon8
first	stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon18
first_row_filter	stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
firstcode	stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon11
firstsymbol	stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon11
flags	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
func	stb_image_write.h	/^   stbi_write_func *func;$/;"	m	struct:__anon20
g	pixel.h	/^    Component r, g, b, a;$/;"	m	struct:Pixel
h	stb_image.h	/^      int h,v;$/;"	m	struct:__anon8::__anon9
h	stb_image.h	/^   int w,h;$/;"	m	struct:__anon19
h2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
ha	camera.h	/^        float ha;         \/\/.5 frustum$/;"	m	class:Camera
ha	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon8::__anon9
hd	stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon8::__anon9
height	image.h	/^    int width, height, num_pixels;$/;"	m	class:Image
height	scene.h	/^        int width, height;$/;"	m	class:Scene
hit	ray.h	/^        Hit *hit;$/;"	m	class:Ray
hs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon10
hsz	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
huff_ac	stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon8
huff_dc	stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon8
id	stb_image.h	/^      int id;$/;"	m	struct:__anon8::__anon9
idata	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
idct_block_kernel	stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon8
img_buffer	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3
img_buffer_end	stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon3
img_buffer_original	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon3
img_buffer_original_end	stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon3
img_comp	stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon8	typeref:struct:__anon8::__anon9
img_h_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon8
img_mcu_h	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon8
img_mcu_w	stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon8
img_mcu_x	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon8
img_mcu_y	stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon8
img_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3
img_out_n	stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon3
img_v_max	stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon8
img_x	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3
img_y	stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon3
intersect	sphere.cpp	/^float Sphere::intersect(Ray *ray)$/;"	f	class:Sphere
io	stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon3
io_user_data	stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon3
ior	material.h	/^        float ior;$/;"	m	class:Material
jfif	stb_image.h	/^   int            jfif;$/;"	m	struct:__anon8
length	stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon13
lflags	stb_image.h	/^   int lflags;$/;"	m	struct:__anon19
lights	scene.h	/^        vector<Light*> lights;$/;"	m	class:Scene
line0	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon10
line1	stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon10
line_size	stb_image.h	/^   int line_size;$/;"	m	struct:__anon19
linebuf	stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon8::__anon9
load_jpeg_image	stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
lpal	stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon19
ma	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
magnitude	floatvector.cpp	/^float FloatVec::magnitude()$/;"	f	class:FloatVec
main	main.cpp	/^int main(int argc, char* argv[]){$/;"	f
marker	stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon8
material	sphere.h	/^        Material material;$/;"	m	class:Sphere
maxDepth	scene.h	/^        int maxDepth;$/;"	m	class:Scene
max_x	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon19
max_y	stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon19
maxcode	stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon11
maxcode	stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon7
mb	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
mg	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
mr	stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon16
nomore	stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon8
normal	hit.h	/^        FloatVec normal;$/;"	m	class:Hit
normalize	floatvector.cpp	/^FloatVec FloatVec::normalize()$/;"	f	class:FloatVec
ns	material.h	/^        float ns;$/;"	m	class:Material
num_bits	stb_image.h	/^   int num_bits;$/;"	m	struct:__anon12
num_channels	stb_image.h	/^   int num_channels;$/;"	m	struct:__anon5
num_pixels	image.h	/^    int width, height, num_pixels;$/;"	m	class:Image
offset	stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon16
old_out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon19
operator *	floatvector.cpp	/^FloatVec FloatVec::operator*(const FloatVec& other)$/;"	f	class:FloatVec
operator *	floatvector.cpp	/^FloatVec FloatVec::operator*(const float scalar)$/;"	f	class:FloatVec
operator *	pixel.cpp	/^Pixel operator* (const Pixel& p, const Pixel& q)$/;"	f
operator *	pixel.cpp	/^Pixel operator* (const Pixel& p, double f)$/;"	f
operator +	floatvector.cpp	/^FloatVec FloatVec::operator+(const FloatVec& other)$/;"	f	class:FloatVec
operator +	pixel.cpp	/^Pixel operator+ (const Pixel& p, const Pixel& q)$/;"	f
operator -	floatvector.cpp	/^FloatVec FloatVec::operator-(const FloatVec& other)$/;"	f	class:FloatVec
operator /	floatvector.cpp	/^FloatVec FloatVec::operator\/(const float scalar)$/;"	f	class:FloatVec
operator =	floatvector.cpp	/^FloatVec& FloatVec::operator=(const FloatVec& other)$/;"	f	class:FloatVec
operator =	material.cpp	/^Material& Material::operator=(const Material& other)$/;"	f	class:Material
order	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon8
origin	ray.h	/^        FloatVec origin; \/\/point$/;"	m	class:Ray
out	stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon14
out	stb_image.h	/^   stbi_uc *out, *old_out;             \/\/ output buffer (always 4 components)$/;"	m	struct:__anon19
pal	stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon19
parse	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon19
pixels	image.h	/^       Pixel *pixels;$/;"	m	union:Image::PixelData
pos	camera.h	/^        FloatVec pos;    \/\/Position$/;"	m	class:Camera
pos	hit.h	/^        FloatVec pos;$/;"	m	class:Hit
pos	light.h	/^        FloatVec pos;$/;"	m	class:Light
prefix	stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon18
progressive	stb_image.h	/^   int            progressive;$/;"	m	struct:__anon8
r	pixel.h	/^    Component r, g, b, a;$/;"	m	struct:Pixel
radius	sphere.h	/^        float radius;$/;"	m	class:Sphere
ratio	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
raw	image.h	/^       uint8_t *raw;$/;"	m	union:Image::PixelData
raw_coeff	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon8::__anon9
raw_data	stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon8::__anon9
read	stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon2
read_from_callbacks	stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon3
resample	stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon10
resample_row_1	stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon8
restart_interval	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon8
rgb	stb_image.h	/^   int            rgb;$/;"	m	struct:__anon8
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon14
s	stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon8
scan_n	stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon8
scene	main.cpp	/^Scene *scene;$/;"	v
size	stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon7
size	stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon11
size	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
skip	stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon2
spec_end	stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon8
spec_start	stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon8
specular	material.h	/^        FloatVec specular;$/;"	m	class:Material
sphere	hit.h	/^        Sphere *sphere;$/;"	m	class:Hit
spheres	scene.h	/^        vector<Sphere*> spheres;$/;"	m	class:Scene
start_x	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon19
start_y	stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon19
stb_image_write_test	stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	stb_image.h	3014;"	d
stbi__EOI	stb_image.h	3016;"	d
stbi__SOF	stb_image.h	3017;"	d
stbi__SOF_progressive	stb_image.h	3020;"	d
stbi__SOI	stb_image.h	3015;"	d
stbi__SOS	stb_image.h	3018;"	d
stbi__YCbCr_to_RGB_row	stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__addsizes_valid	stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f
stbi__at_eof	stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__blinn_8x8	stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f
stbi__bmask	stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_data	stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon16
stbi__bmp_info	stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__bmp_parse_header	stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f
stbi__bmp_test	stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_transparency16	stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f
stbi__compute_y	stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__compute_y_16	stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f
stbi__context	stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon3
stbi__convert_16_to_8	stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f
stbi__convert_8_to_16	stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f
stbi__convert_format	stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__convert_format16	stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	stb_image.h	3141;"	d
stbi__div4	stb_image.h	3092;"	d
stbi__do_png	stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)$/;"	f
stbi__do_zlib	stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__end_write_file	stb_image_write.h	/^static void stbi__end_write_file(stbi__write_context *s)$/;"	f
stbi__err	stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	stb_image.h	905;"	d
stbi__err	stb_image.h	907;"	d
stbi__err	stb_image.h	909;"	d
stbi__errpf	stb_image.h	912;"	d
stbi__errpuc	stb_image.h	913;"	d
stbi__expand_png_palette	stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	stb_image.h	2093;"	d
stbi__fill_bits	stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g, int x0, int y0, int x1, int y1)$/;"	f
stbi__float2fixed	stb_image.h	3297;"	d
stbi__float2int	stb_image.h	1565;"	d
stbi__float_postprocess	stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__fopen	stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__free_jpeg_components	stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f
stbi__fsh	stb_image.h	2094;"	d
stbi__g_failure_reason	stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon19
stbi__gif_header	stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__gif_load_next	stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon18
stbi__gif_parse_colortable	stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__hdr_test	stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f
stbi__hdr_to_ldr	stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon7
stbi__idct_block	stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__int16	stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon8
stbi__jpeg_decode_block	stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f
stbi__jpeg_dezigzag	stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__jpeg_reset	stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__load_and_postprocess_16bit	stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_and_postprocess_8bit	stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__load_main	stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__loadf_main	stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__mad2sizes_valid	stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f
stbi__mad3sizes_valid	stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f
stbi__mad4sizes_valid	stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f
stbi__malloc	stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__malloc_mad2	stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f
stbi__malloc_mad3	stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f
stbi__malloc_mad4	stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f
stbi__mul2sizes_valid	stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f
stbi__out_gif_code	stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncompressed_block	stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)$/;"	f
stbi__pic_load_core	stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon17
stbi__pic_test	stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon14
stbi__png_info	stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__png_test	stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon13
stbi__pnm_getinteger	stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__pnm_skip_whitespace	stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_decode_rle	stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f
stbi__psd_info	stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)$/;"	f
stbi__psd_test	stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon10
stbi__resample_row_generic	stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__result_info	stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon5
stbi__rewind	stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	stb_image.h	/^static int stbi__sse2_available(void)$/;"	f
stbi__start_callbacks	stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__start_write_callbacks	stb_image_write.h	/^static void stbi__start_write_callbacks(stbi__write_context *s, stbi_write_func *c, void *context)$/;"	f
stbi__start_write_file	stb_image_write.h	/^static int stbi__start_write_file(stbi__write_context *s, const char *filename)$/;"	f
stbi__stdio_callbacks	stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__stdio_write	stb_image_write.h	/^static void stbi__stdio_write(void *context, void *data, int size)$/;"	f
stbi__tga_get_comp	stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f
stbi__tga_info	stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)$/;"	f
stbi__tga_read_rgb16	stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f
stbi__tga_test	stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__vertical_flip	stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f
stbi__vertically_flip_on_load	stb_image.h	/^static int stbi__vertically_flip_on_load = 0;$/;"	v
stbi__write_context	stb_image_write.h	/^} stbi__write_context;$/;"	t	typeref:struct:__anon20
stbi__zbuf	stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon12
stbi__zbuild_huffman	stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v
stbi__zdefault_length	stb_image.h	/^static const stbi_uc stbi__zdefault_length[288] =$/;"	v
stbi__zdist_base	stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon11
stbi__zhuffman_decode	stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	stb_image.h	501;"	d
stbi_inline	stb_image.h	503;"	d
stbi_inline	stb_image.h	506;"	d
stbi_io_callbacks	stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon2
stbi_is_hdr	stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16	stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_16_from_callbacks	stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_16_from_memory	stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)$/;"	f
stbi_load_from_callbacks	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file_16	stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	stb_image.h	537;"	d
stbi_lrot	stb_image.h	539;"	d
stbi_set_flip_vertically_on_load	stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f
stbi_set_unpremultiply_on_load	stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_us	stb_image.h	/^typedef unsigned short stbi_us;$/;"	t
stbi_write_bmp	stb_image_write.h	/^STBIWDEF int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_core	stb_image_write.h	/^static int stbi_write_bmp_core(stbi__write_context *s, int x, int y, int comp, const void *data)$/;"	f
stbi_write_bmp_to_func	stb_image_write.h	/^STBIWDEF int stbi_write_bmp_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_func	stb_image_write.h	/^typedef void stbi_write_func(void *context, void *data, int size);$/;"	t
stbi_write_hdr	stb_image_write.h	/^STBIWDEF int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_hdr_core	stb_image_write.h	/^static int stbi_write_hdr_core(stbi__write_context *s, int x, int y, int comp, float *data)$/;"	f
stbi_write_hdr_to_func	stb_image_write.h	/^STBIWDEF int stbi_write_hdr_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const float *data)$/;"	f
stbi_write_jpg	stb_image_write.h	/^STBIWDEF int stbi_write_jpg(char const *filename, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_jpg_core	stb_image_write.h	/^static int stbi_write_jpg_core(stbi__write_context *s, int width, int height, int comp, const void* data, int quality) {$/;"	f
stbi_write_jpg_to_func	stb_image_write.h	/^STBIWDEF int stbi_write_jpg_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int quality)$/;"	f
stbi_write_png	stb_image_write.h	/^STBIWDEF int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_func	stb_image_write.h	/^STBIWDEF int stbi_write_png_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	stb_image_write.h	/^STBIWDEF int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_core	stb_image_write.h	/^static int stbi_write_tga_core(stbi__write_context *s, int x, int y, int comp, void *data)$/;"	f
stbi_write_tga_to_func	stb_image_write.h	/^STBIWDEF int stbi_write_tga_to_func(stbi_write_func *func, void *context, int x, int y, int comp, const void *data)$/;"	f
stbi_write_tga_with_rle	stb_image_write.h	/^int stbi_write_tga_with_rle = 1;$/;"	v
stbi_write_tga_with_rle	stb_image_write.h	/^static int stbi_write_tga_with_rle = 1;$/;"	v
stbi_zlib_compress	stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	stb_image_write.h	743;"	d
stbiw__crc32	stb_image_write.h	/^static unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__jpg_DCT	stb_image_write.h	/^static void stbiw__jpg_DCT(float *d0p, float *d1p, float *d2p, float *d3p, float *d4p, float *d5p, float *d6p, float *d7p) {$/;"	f
stbiw__jpg_ZigZag	stb_image_write.h	/^static const unsigned char stbiw__jpg_ZigZag[] = { 0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,$/;"	v
stbiw__jpg_calcBits	stb_image_write.h	/^static void stbiw__jpg_calcBits(int val, unsigned short bits[2]) {$/;"	f
stbiw__jpg_processDU	stb_image_write.h	/^static int stbiw__jpg_processDU(stbi__write_context *s, int *bitBuf, int *bitCnt, float *CDU, float *fdtbl, int DC, const unsigned short HTDC[256][2], const unsigned short HTAC[256][2]) {$/;"	f
stbiw__jpg_writeBits	stb_image_write.h	/^static void stbiw__jpg_writeBits(stbi__write_context *s, int *bitBufP, int *bitCntP, const unsigned short *bs) {$/;"	f
stbiw__linear_to_rgbe	stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	stb_image_write.h	493;"	d
stbiw__outfile	stb_image_write.h	/^static int stbiw__outfile(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
stbiw__paeth	stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__putc	stb_image_write.h	/^static void stbiw__putc(stbi__write_context *s, unsigned char c)$/;"	f
stbiw__sbcount	stb_image_write.h	675;"	d
stbiw__sbfree	stb_image_write.h	676;"	d
stbiw__sbgrow	stb_image_write.h	672;"	d
stbiw__sbgrowf	stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	stb_image_write.h	667;"	d
stbiw__sbmaybegrow	stb_image_write.h	671;"	d
stbiw__sbn	stb_image_write.h	668;"	d
stbiw__sbneedgrow	stb_image_write.h	670;"	d
stbiw__sbpush	stb_image_write.h	674;"	d
stbiw__sbraw	stb_image_write.h	666;"	d
stbiw__wp32	stb_image_write.h	896;"	d
stbiw__wpcrc	stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	stb_image_write.h	895;"	d
stbiw__wptag	stb_image_write.h	897;"	d
stbiw__write3	stb_image_write.h	/^static void stbiw__write3(stbi__write_context *s, unsigned char a, unsigned char b, unsigned char c)$/;"	f
stbiw__write_dump_data	stb_image_write.h	/^void stbiw__write_dump_data(stbi__write_context *s, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	stb_image_write.h	/^void stbiw__write_hdr_scanline(stbi__write_context *s, int width, int ncomp, unsigned char *scratch, float *scanline)$/;"	f
stbiw__write_pixel	stb_image_write.h	/^static void stbiw__write_pixel(stbi__write_context *s, int rgb_dir, int comp, int write_alpha, int expand_mono, unsigned char *d)$/;"	f
stbiw__write_pixels	stb_image_write.h	/^static void stbiw__write_pixels(stbi__write_context *s, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
stbiw__write_run_data	stb_image_write.h	/^void stbiw__write_run_data(stbi__write_context *s, int length, unsigned char databyte)$/;"	f
stbiw__writef	stb_image_write.h	/^static void stbiw__writef(stbi__write_context *s, const char *fmt, ...)$/;"	f
stbiw__writefv	stb_image_write.h	/^static void stbiw__writefv(stbi__write_context *s, const char *fmt, va_list v)$/;"	f
stbiw__zhash	stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	stb_image_write.h	732;"	d
stbiw__zlib_bitrev	stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	stb_image_write.h	731;"	d
stbiw__zlib_flushf	stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	stb_image_write.h	740;"	d
stbiw__zlib_huff1	stb_image_write.h	736;"	d
stbiw__zlib_huff2	stb_image_write.h	737;"	d
stbiw__zlib_huff3	stb_image_write.h	738;"	d
stbiw__zlib_huff4	stb_image_write.h	739;"	d
stbiw__zlib_huffa	stb_image_write.h	734;"	d
stbiw__zlib_huffb	stb_image_write.h	741;"	d
stbiw_uint32	stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
step	stb_image.h	/^   int parse, step;$/;"	m	struct:__anon19
succ_high	stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon8
succ_low	stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon8
suffix	stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon18
t	ray.h	/^        float t;$/;"	m	class:Ray
tMax	ray.h	/^        float tMin, tMax;$/;"	m	class:Ray
tMin	ray.h	/^        float tMin, tMax;$/;"	m	class:Ray
tl	scene.h	/^        FloatVec *tl, *tr, *br, *bl;$/;"	m	class:Scene
toString	floatvector.cpp	/^string FloatVec::toString()$/;"	f	class:FloatVec
toString	ray.cpp	/^string Ray::toString()$/;"	f	class:Ray
todo	stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon8
tq	stb_image.h	/^      int tq;$/;"	m	struct:__anon8::__anon9
tr	scene.h	/^        FloatVec *tl, *tr, *br, *bl;$/;"	m	class:Scene
transmissive	material.h	/^        FloatVec transmissive;$/;"	m	class:Material
transparent	stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags, delay;$/;"	m	struct:__anon19
type	light.h	/^        Type type;$/;"	m	class:Light
type	stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon13
type	stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon17
up	camera.h	/^        FloatVec up;    \/\/Up vector$/;"	m	class:Camera
v	stb_image.h	/^      int h,v;$/;"	m	struct:__anon8::__anon9
validate_uint32	stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
value	stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon11
values	stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon7
vs	stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon10
w	stb_image.h	/^   int w,h;$/;"	m	struct:__anon19
w2	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
w_lores	stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon10
width	image.h	/^    int width, height, num_pixels;$/;"	m	class:Image
width	scene.h	/^        int width, height;$/;"	m	class:Scene
x	floatvector.h	/^        float x,y,z;$/;"	m	class:FloatVec
x	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
y	floatvector.h	/^        float x,y,z;$/;"	m	class:FloatVec
y	stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon8::__anon9
ypos	stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon10
ystep	stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon10
z	floatvector.h	/^        float x,y,z;$/;"	m	class:FloatVec
z_distance	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon12
z_expandable	stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon12
z_length	stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon12
zbuffer	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon12
zbuffer_end	stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon12
zout	stb_image.h	/^   char *zout;$/;"	m	struct:__anon12
zout_end	stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon12
zout_start	stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon12
~Camera	camera.cpp	/^Camera::~Camera(){}$/;"	f	class:Camera
~FloatVec	floatvector.cpp	/^FloatVec::~FloatVec() {}$/;"	f	class:FloatVec
~Image	image.cpp	/^Image::~Image (){$/;"	f	class:Image
~Ray	ray.cpp	/^Ray::~Ray(){}$/;"	f	class:Ray
~Scene	scene.cpp	/^Scene::~Scene(){ $/;"	f	class:Scene
